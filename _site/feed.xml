<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-16T15:54:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HevaWu’s Blog</title><entry><title type="html">HashMap vs HashSet</title><link href="http://localhost:4000/java/hashmap/hashset/2019/09/14/HashMap-vs-HashSet.html" rel="alternate" type="text/html" title="HashMap vs HashSet" /><published>2019-09-14T02:52:00+09:00</published><updated>2019-09-14T02:52:00+09:00</updated><id>http://localhost:4000/java/hashmap/hashset/2019/09/14/HashMap-vs-HashSet</id><content type="html" xml:base="http://localhost:4000/java/hashmap/hashset/2019/09/14/HashMap-vs-HashSet.html">&lt;p&gt;The obvious difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;HashSet&lt;/code&gt; would be interface.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HashSet is an implementation of Set Interface which does not allow duplicate value. Objects that are stored in HashSet must override equals() for checking equality and hashCode() methods for no duplicate value are stored in our set.&lt;/li&gt;
  &lt;li&gt;HashMap is an implementaion of Map Interface which map a key to value. Duplicate keys are not allowed in a map. Map Interface has 2 implementation classes: HashMap, TreeMap. The main difference is TreeMap maintains order of the objects but HashMap will not. HashMap allows null values and null keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HashMap is faster than HashSet.&lt;/li&gt;
  &lt;li&gt;Dummy value: HashMap doesn’t have concept of dummy value, HashSet internally uses HashMap to add elements. In HashSet, java internally associates dummy value for each value passed in add(Object) method.&lt;/li&gt;
  &lt;li&gt;Storing or Adding mechanism: HashMap internally uses hashing to store or add objects. HashSet internally uses HashMap object to store or add objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;map--hashmap&quot;&gt;Map &amp;amp; HashMap&lt;/h3&gt;

&lt;p&gt;No difference between the objects. We could set &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt; in both cases.&lt;/p&gt;

&lt;p&gt;The advantage to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; is that you can change the object to be a different kind of map without breaking the contract with any code that’s using. If we declare it as &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&amp;lt;String, Object&amp;gt;&lt;/code&gt;, it is needed to change the contract code if we want to change the underlying implementation.&lt;/p&gt;

&lt;p&gt;Interfaces (and base classes) let us reveal &lt;code class=&quot;highlighter-rouge&quot;&gt;only as  much as is necessary&lt;/code&gt;, keeping our flexibility under the covers to make changes as appropriate. In general, we want to have our references be as basic as possible. If we don’t need to know its a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;, just call it a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Same for Set &amp;amp; HashSet.&lt;/p&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;p&gt;https://www.geeksforgeeks.org/difference-between-hashmap-and-hashset/
https://stackoverflow.com/a/1348228&lt;/p&gt;</content><author><name></name></author><category term="Java" /><category term="HashMap" /><category term="HashSet" /><category term="Map" /><category term="Set" /><summary type="html">The obvious difference between HashMap &amp;amp; HashSet would be interface.</summary></entry><entry><title type="html">Java Primitive Data Types</title><link href="http://localhost:4000/java/primitive%20data/2019/09/13/Java-Primitive-Data-Types.html" rel="alternate" type="text/html" title="Java Primitive Data Types" /><published>2019-09-13T23:22:00+09:00</published><updated>2019-09-13T23:22:00+09:00</updated><id>http://localhost:4000/java/primitive%20data/2019/09/13/Java-Primitive-Data-Types</id><content type="html" xml:base="http://localhost:4000/java/primitive%20data/2019/09/13/Java-Primitive-Data-Types.html">&lt;p&gt;List of Java’s primitive data types&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Types&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Size in Bytes&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Range&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;byte&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1 byte&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-128 to 127&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;short&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-32768 to 32767&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-2,147,483,648 to 2,147,483, 647&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;long&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;4 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;approximately ±3.40282347E+38F(6-7 significant decimal digits)Java implements IEEE 754 standard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;double&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;approximately ±1.79769313486231570E+308(15 significant decimal digits)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;char&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2 byte&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0 to 65,536 (unsigned)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;boolean&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;not precisely defined&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;true or false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="Java" /><category term="Primitive Data" /><summary type="html">List of Java’s primitive data types</summary></entry><entry><title type="html">Java Arrays Sort Algorithm</title><link href="http://localhost:4000/sort/java/arrays/2019/09/12/Java-Arrays-Sort-Algorithm.html" rel="alternate" type="text/html" title="Java Arrays Sort Algorithm" /><published>2019-09-12T19:57:00+09:00</published><updated>2019-09-12T19:57:00+09:00</updated><id>http://localhost:4000/sort/java/arrays/2019/09/12/Java-Arrays-Sort-Algorithm</id><content type="html" xml:base="http://localhost:4000/sort/java/arrays/2019/09/12/Java-Arrays-Sort-Algorithm.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java.util.Arrays&lt;/code&gt; uses&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;quicksort(dual pivot quick sort) : primitive types such as &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;mergesort : for objects that implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&lt;/code&gt; or use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Comparator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;quicksort &amp;lt;- fast
mergesort &amp;lt;- stable&lt;/p&gt;

&lt;p&gt;Dual pivot quicksort is a combination of insertion sort and quick sort. Insertion sort has faster runtime when the number of elements t obe sorted is small, double pivot quicksort uses this fact thus when the number of elements is &amp;lt;= 47 Java performs insertion sort under the hood.&lt;/p&gt;

&lt;p&gt;When input size array is larger than 47 Java uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Doubl pivot quicksort&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dual-pivot-quick-sort&quot;&gt;Dual Pivot Quick Sort&lt;/h2&gt;

&lt;p&gt;Single pivot quick sort takes a pivot from one of the ends of the array and partitioning the array, so that all elements which at the left side are less than or equal to the pivot, and all elements which at the right side are greater than pivot.&lt;/p&gt;

&lt;p&gt;The idea of dual pivot quick sort is to take two pivots. One in the left end of the array and the second, in the right end of array. The left pivot must be less than or equal to the right pivot, if it is not, we swap them. Then begin partitioning the array into 3 parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the first part, all elements will be less than the left pivot.&lt;/li&gt;
  &lt;li&gt;In the second part, all elements will be greater or equal to the left pivot and also will be less than or equal to the right pivot&lt;/li&gt;
  &lt;li&gt;In the third part, all elements will be greater than the right pivot&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt; LP&lt;/td&gt;
      &lt;td&gt;LP&lt;/td&gt;
      &lt;td&gt;LP&amp;lt;= &amp;amp; &amp;lt;= RP&lt;/td&gt;
      &lt;td&gt;RP&lt;/td&gt;
      &lt;td&gt;RP &amp;lt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Dual pivot quick sort is typlically faster than traditional single pivot quicksort. This algorithm offers &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n log(n))&lt;/code&gt; performance on many data sets that cause other quicksorts to degrade to quadratic performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-09-12-Java-Arrays-Sort-Algorithm/dual_pivot_quick_sort.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://cafe.elharo.com/programming/java-programming/why-java-util-arrays-uses-two-sorting-algorithms/&quot;&gt;Why java.util.Arrays uses Two Sorting Algorithms&lt;/a&gt;
&lt;a href=&quot;https://www.geeksforgeeks.org/dual-pivot-quicksort/&quot;&gt;Dual Pivot Quick Sort&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Sort" /><category term="Java" /><category term="Arrays" /><category term="Dual Pivot Quick Sort" /><category term="Merge Sort" /><summary type="html">java.util.Arrays uses</summary></entry><entry><title type="html">Try Vision Sample Code</title><link href="http://localhost:4000/ios/vision/sample%20code/2019/07/26/Try-Vision-Sample-Code.html" rel="alternate" type="text/html" title="Try Vision Sample Code" /><published>2019-07-26T21:33:00+09:00</published><updated>2019-07-26T21:33:00+09:00</updated><id>http://localhost:4000/ios/vision/sample%20code/2019/07/26/Try-Vision-Sample-Code</id><content type="html" xml:base="http://localhost:4000/ios/vision/sample%20code/2019/07/26/Try-Vision-Sample-Code.html">&lt;p&gt;WWDC 2019 Introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vision&lt;/code&gt; Framework.
And they also provide the Sample Code !!!&lt;/p&gt;

&lt;p&gt;How exciting! Let’s try it!&lt;/p&gt;

&lt;h2 id=&quot;classifying-images-for-categorization-and-search&quot;&gt;Classifying Images for Categorization and Search&lt;/h2&gt;

&lt;p&gt;This is sample project for labeling/categorizing the giving images.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SDKs: macOS 10.15+
Xcode: 11.0+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-26-Try-Vision-Sample-Code/classify_image.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;analyzing-image-similarity-with-feature-print&quot;&gt;Analyzing Image Similarity with Feature Print&lt;/h2&gt;

&lt;p&gt;This is sample project for checking how silimarity between several pictures.
Sorry I didn’t update my device to iOS 13.
So the only thing I could attach at here is the video-cut from WWDC video.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-26-Try-Vision-Sample-Code/image_similarity.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;highlighting-areas-of-interest-in-an-image-using-saliency&quot;&gt;Highlighting Areas of Interest in an Image Using Saliency&lt;/h2&gt;

&lt;p&gt;This is sample project for bounding people forcused area.
I only try in on macOS.&lt;/p&gt;

&lt;p&gt;After selecting the picture you want to anlyze, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rects&lt;/code&gt; cut the saliency bound,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;Mask&lt;/code&gt; give us the saliency masks. &lt;code class=&quot;highlighter-rouge&quot;&gt;Combind&lt;/code&gt; means combine the bounds &amp;amp; masks,
which will show the saliency area above the picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-26-Try-Vision-Sample-Code/highlight_image_saliency.gif&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="Vision" /><summary type="html">WWDC 2019 Introduce the Vision Framework. And they also provide the Sample Code !!!</summary></entry><entry><title type="html">Be Careful Using `Named Color` at Xcode Xib File</title><link href="http://localhost:4000/ios/xcode/xib/named%20color/2019/07/04/Be-Careful-Using-Named-Color-at-Xcode-Xib-File.html" rel="alternate" type="text/html" title="Be Careful Using `Named Color` at Xcode Xib File" /><published>2019-07-04T00:30:00+09:00</published><updated>2019-07-04T00:30:00+09:00</updated><id>http://localhost:4000/ios/xcode/xib/named%20color/2019/07/04/Be-Careful-Using-Named-Color-at-Xcode-Xib-File</id><content type="html" xml:base="http://localhost:4000/ios/xcode/xib/named%20color/2019/07/04/Be-Careful-Using-Named-Color-at-Xcode-Xib-File.html">&lt;p&gt;At WWDC 2019, Apple introduced the nice dark mode color settings.
By adding the dark mode color settings, Apple suggest to define &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xsassets&lt;/code&gt;.
However, during implementation, there is an issue, and we should pay attetion on it.&lt;/p&gt;

&lt;p&gt;I will first introduce how to add &amp;amp; use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt;,
then introduce the problems.&lt;/p&gt;

&lt;p&gt;At first, I have a &lt;code class=&quot;highlighter-rouge&quot;&gt;TabBarController&lt;/code&gt; based project.
I could switch my view controllers (FirstViewController, SecondViewController) by using the tab bar.&lt;/p&gt;

&lt;h2 id=&quot;add-new-color-set&quot;&gt;Add New Color Set&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and choosing &lt;code class=&quot;highlighter-rouge&quot;&gt;New Color Set&lt;/code&gt;, then you could naming it(I add a &lt;code class=&quot;highlighter-rouge&quot;&gt;TabBarItemLabelColor&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-03-Be-Careful-Using-Named-Color-at-Xcode-Xib-File/color_set.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;Attributes Inspector&lt;/code&gt;, set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; params&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-new-color-set&quot;&gt;Use New Color Set&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;At &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file, we could directly select the color under &lt;code class=&quot;highlighter-rouge&quot;&gt;Attributes Inspector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-03-Be-Careful-Using-Named-Color-at-Xcode-Xib-File/xib.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;At coding part, we could directly call &lt;code class=&quot;highlighter-rouge&quot;&gt;UIColor(named: &quot;TabBarItemLabelColor&quot;)&lt;/code&gt; to use it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problems-be-careful-bomb-&quot;&gt;Problems (Be Careful :bomb: )&lt;/h2&gt;
&lt;p&gt;OK. Now back to our main point.&lt;/p&gt;

&lt;h3 id=&quot;if-you-are-using-named-color-at-the-xib-file-please-be-carefule-to-change-it-at-the-coding-part&quot;&gt;If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt; at the &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file, please be carefule to change it at the coding part&lt;/h3&gt;
&lt;p&gt;Since we add a new color set at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt;,
so of course we could directly call it at the &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; If you will &lt;code class=&quot;highlighter-rouge&quot;&gt;rewrite&lt;/code&gt; this variable in the later coding part.
Then you should be careful.&lt;/p&gt;

&lt;p&gt;At the first, I thought we could rewrite the color at the code part where we want.
(Same as before). However, I found my color is not updated (showing correctly)
at the first time. :disappointed:&lt;/p&gt;

&lt;p&gt;Then I try to find the reason.&lt;/p&gt;

&lt;p&gt;For what I am testing is :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;label color&lt;/code&gt; observer at the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; part (where I prepare to rewrite the color). I tried to use this observer to help checking how the color changes.
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;firstLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// observer for checking if the color is changed&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I got this output&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIExtendedSRGBColorSpace&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGColorSpaceModelRGB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first line is &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; line, so we &lt;strong&gt;do&lt;/strong&gt; rewrite the color
The second line shows the label’s color changed later.&lt;/p&gt;

&lt;p&gt;I have no idea when the label’s color changed.
But I tried to put the &lt;code class=&quot;highlighter-rouge&quot;&gt;label.color = .red&lt;/code&gt; rewrite color code at
&lt;code class=&quot;highlighter-rouge&quot;&gt;variabe's didSet{}&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLayoutSubview()&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear()&lt;/code&gt; part.
All of them cannot rewrite the color succesfully.
Except &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear()&lt;/code&gt;
You could checking them in this file
https://github.com/HevaWu/TestColorAssets/blob/master/TestColorAssets/TestColorAssets/FirstViewController.swift&lt;/p&gt;

&lt;p&gt;I don’t know the detail implementation about the &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For what I am thinking is:
Maybe reading the &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xsassets&lt;/code&gt; takes some time &amp;amp; calculation.&lt;/p&gt;

&lt;p&gt;At the &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file part, if we checking its code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-03-Be-Careful-Using-Named-Color-at-Xcode-Xib-File/text_color.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So Xcode read the color by its &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;
And in the &lt;code class=&quot;highlighter-rouge&quot;&gt;resources&lt;/code&gt; part&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-07-03-Be-Careful-Using-Named-Color-at-Xcode-Xib-File/resources.png&quot; width=&quot;100%&quot; /&gt;
Xcode will try to find the &lt;code class=&quot;highlighter-rouge&quot;&gt;named Color&lt;/code&gt; by reading its resources&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;finding&lt;/code&gt; might take some times.&lt;/p&gt;

&lt;p&gt;Because if we set the &lt;code class=&quot;highlighter-rouge&quot;&gt;dark mode&lt;/code&gt; colors, Xcode will first reading the device
environment, then try to update/fit the colors.
But during this time &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; has already finished.&lt;/p&gt;

&lt;p&gt;So even we rewrite the label’s color in it,
it still be replaced by &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;If you are not using &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt; at the &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file part &amp;lt;- everything goes well&lt;/li&gt;
  &lt;li&gt;If you are using &lt;code class=&quot;highlighter-rouge&quot;&gt;Named Color&lt;/code&gt; at the &lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt; file
    &lt;ul&gt;
      &lt;li&gt;You will not change this color in the code part &amp;lt;- everythin goes well&lt;/li&gt;
      &lt;li&gt;You will/might change this color later (be carefule)
        &lt;ul&gt;
          &lt;li&gt;You shouldn’t change the color at &lt;code class=&quot;highlighter-rouge&quot;&gt;didSet{}&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLayoutSubviews()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear()&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;You could change the color at &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear()&lt;/code&gt; (If you find other places we could rewrite it, please tell me :+1: )&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;at-the-end&quot;&gt;At the end&lt;/h2&gt;
&lt;p&gt;Thank you for the reading. Please feel free to tell me if I wrote anything wrong. :relaxed:&lt;/p&gt;

&lt;h4 id=&quot;link&quot;&gt;Link&lt;/h4&gt;
&lt;p&gt;https://github.com/HevaWu/TestColorAssets&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="Xcode" /><category term="XIB" /><category term="Named Color" /><summary type="html">At WWDC 2019, Apple introduced the nice dark mode color settings. By adding the dark mode color settings, Apple suggest to define Named Color at Assets.xsassets. However, during implementation, there is an issue, and we should pay attetion on it.</summary></entry><entry><title type="html">Cannot Run `Realm` Scheme After Install Xcode11 beta</title><link href="http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/28/Cannot_Run_Realm_Scheme_After_Install_Xcode11beta.html" rel="alternate" type="text/html" title="Cannot Run `Realm` Scheme After Install Xcode11 beta" /><published>2019-06-28T20:53:00+09:00</published><updated>2019-06-28T20:53:00+09:00</updated><id>http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/28/Cannot_Run_Realm_Scheme_After_Install_Xcode11beta</id><content type="html" xml:base="http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/28/Cannot_Run_Realm_Scheme_After_Install_Xcode11beta.html">&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;This happens because I installed both Xcode 10 &amp;amp; Xcode 11 beta. Also, I installed the required components after installing Xcode 11 beta.
After installing Xcode 11 beta, when we try to run application, it shows an error.
For my case, &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; works well, &lt;code class=&quot;highlighter-rouge&quot;&gt;real&lt;/code&gt; build successful but Xcode show an error &lt;code class=&quot;highlighter-rouge&quot;&gt;The Application's Info.plist Does Not Contain CFBundleVersion&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reason&quot;&gt;Reason&lt;/h2&gt;
&lt;p&gt;Reference: https://stackoverflow.com/questions/56450295/cannot-run-application-on-simulator-after-installing-xcode-11-cfbundleversion&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The issue here is that the new version of CoreSimulator.framework with Xcode 11 beta does validation on CFBundleVersion that previous versions did not do. These checks are valid, and it does represent an issue in your application, but there’s also a bug in how the checks were performed in Xcode 11 Beta 1 which compounds the issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;For my case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleVersion&lt;/code&gt; shows correctly.
And &lt;code class=&quot;highlighter-rouge&quot;&gt;killall -9 CoreSimulatorBridge&lt;/code&gt; doesn’t works for me.&lt;/p&gt;

&lt;p&gt;What I’m trying to do is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Quit Xcode &amp;amp; Simulator&lt;/li&gt;
  &lt;li&gt;Remove &lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Developer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Relaunch Xcode 10, and it works well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After relaunching it works well now. 🎉&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="WWDC2019" /><category term="API Design" /><category term="Swift" /><summary type="html">Description This happens because I installed both Xcode 10 &amp;amp; Xcode 11 beta. Also, I installed the required components after installing Xcode 11 beta. After installing Xcode 11 beta, when we try to run application, it shows an error. For my case, beta works well, real build successful but Xcode show an error The Application's Info.plist Does Not Contain CFBundleVersion.</summary></entry><entry><title type="html">Modern Swift API Design</title><link href="http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/13/Modern-Swift-API-Deisgn.html" rel="alternate" type="text/html" title="Modern Swift API Design" /><published>2019-06-13T00:59:00+09:00</published><updated>2019-06-13T00:59:00+09:00</updated><id>http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/13/Modern-Swift-API-Deisgn</id><content type="html" xml:base="http://localhost:4000/ios/wwdc2019/api%20design/swift/2019/06/13/Modern-Swift-API-Deisgn.html">&lt;h1 id=&quot;guidelines&quot;&gt;Guidelines&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swift.org/documentation/api-design-guidelines&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;clarity-the-point-of-use&quot;&gt;Clarity the point of use&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;No Prefixes in Swift-only Frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;values-and-references&quot;&gt;Values and References&lt;/h2&gt;
&lt;p&gt;Classes - Reference Types
Structs and Enums - Value Types&lt;/p&gt;

&lt;h3 id=&quot;choosing---reference-or-value-&quot;&gt;Choosing - Reference or Value ?&lt;/h3&gt;
&lt;p&gt;Prefer structs over classes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Only choose classes when reference semantics are important&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Classes can make a good choice when&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You need a reference counting and deinitialization&lt;/li&gt;
  &lt;li&gt;The value is held centrally and shared&lt;/li&gt;
  &lt;li&gt;Where there is held centrally and shared&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;value-and-reference-semantics&quot;&gt;Value and Reference Semantics&lt;/h3&gt;
&lt;p&gt;Value types makes copy of reference types&lt;/p&gt;

&lt;h2 id=&quot;protocols-and-generics&quot;&gt;Protocols and Generics&lt;/h2&gt;
&lt;p&gt;Don’t literally start with a protocol&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Start with concrete use cases&lt;/li&gt;
  &lt;li&gt;Discover a need for generic code&lt;/li&gt;
  &lt;li&gt;Try to compose solutions from existing protocols first&lt;/li&gt;
  &lt;li&gt;Consider a generic type instead of a protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protocol for code reuse, otherwise use generics.&lt;/p&gt;

&lt;h3 id=&quot;key-path-member-lookup&quot;&gt;Key Path Member Lookup&lt;/h3&gt;
&lt;p&gt;Swift Evolution: SE-0252
&lt;code class=&quot;highlighter-rouge&quot;&gt;@dynamicMemberLookup&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;subscript&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; backing storage property, binding property, key path member lookup&lt;/p&gt;

&lt;h2 id=&quot;property-wrapper&quot;&gt;Property Wrapper&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LateInitialized&lt;/code&gt; &amp;lt;- give a private policy
Provides similar benefits to the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;lazy&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Eliminates boilerplate&lt;/li&gt;
  &lt;li&gt;Documents semantics at the point of definition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Property wrappers reuse computed property definitions.&lt;/p&gt;

&lt;h3 id=&quot;using-property-wrappers&quot;&gt;Using Property Wrappers&lt;/h3&gt;
&lt;p&gt;Uses of property wrappers expand into a stored property and a computed property&lt;/p&gt;

&lt;h3 id=&quot;using-the-defensivecopying-property-wrapper&quot;&gt;Using the DefensiveCopying Property Wrapper&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@DefensiveCopying&lt;/code&gt; Variables can be initialized in their declaration&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Property Wrappers in UserDefault&lt;/li&gt;
  &lt;li&gt;Property Wrappers in SwiftUI&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="iOS" /><category term="WWDC2019" /><category term="API Design" /><category term="Swift" /><summary type="html">Guidelines swift.org/documentation/api-design-guidelines</summary></entry><entry><title type="html">Vision Framework</title><link href="http://localhost:4000/ios/image%20processing/vision/2019/06/07/Vision-Framework.html" rel="alternate" type="text/html" title="Vision Framework" /><published>2019-06-07T23:35:00+09:00</published><updated>2019-06-07T23:35:00+09:00</updated><id>http://localhost:4000/ios/image%20processing/vision/2019/06/07/Vision-Framework</id><content type="html" xml:base="http://localhost:4000/ios/image%20processing/vision/2019/06/07/Vision-Framework.html">&lt;p&gt;Since WWDC 2018, Apple introduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vision&lt;/code&gt; Framework.
And I’d like to take some nots on it.&lt;/p&gt;

&lt;h1 id=&quot;saliency&quot;&gt;Saliency&lt;/h1&gt;

&lt;p&gt;Saliency generated people’s attension &amp;amp; objectness.
Highlight when people watch the image.&lt;/p&gt;

&lt;p&gt;Attention Based&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Human Aspected&lt;/li&gt;
  &lt;li&gt;Trained on eye movements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objectness Based&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Foreground Objects&lt;/li&gt;
  &lt;li&gt;Trained on object segmentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example image:
The first picture is the original picture
The second is attention based picture
The third is objectness based picture
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/attention_objectness.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;determined-by&quot;&gt;Determined by&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Contrast&lt;/li&gt;
  &lt;li&gt;Faces&lt;/li&gt;
  &lt;li&gt;Subjects&lt;/li&gt;
  &lt;li&gt;Horizons&lt;/li&gt;
  &lt;li&gt;Light&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heatmap&quot;&gt;Heatmap&lt;/h2&gt;
&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;VNGenerateAttensionBasedSaliencyImageRequest&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;VNGenerateObjectnessBasedSaliencyImageRequest&lt;/code&gt;
to generate the image with the highlight picture.
The highlight part is covered by a heatmap, which point out the Saliency part.
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/saliency_example_code.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bounding-box&quot;&gt;Bounding Box&lt;/h2&gt;
&lt;p&gt;For attension of the saliency, we will have a bounding box, which
could draw out the correct image area.&lt;/p&gt;

&lt;p&gt;Here is an example code about how to adding th bounding box and showing it.
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/saliency_boundbox.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;graphical-uses&quot;&gt;Graphical Uses&lt;/h2&gt;
&lt;p&gt;Add type of filter or photo transition.
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/saliency_graphic_uses.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;image-classification&quot;&gt;Image Classification&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Use saliency to detect the object &amp;amp; return the bounding box-es&lt;/li&gt;
  &lt;li&gt;For each bounding box, use image classification to find out which object it is.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;taxonomy&quot;&gt;Taxonomy&lt;/h2&gt;
&lt;p&gt;Hierarchical structure, containing around 100 classes.
Grouping based on shared semantic meanings.
Define relationships between classes of increasing specificity.&lt;/p&gt;

&lt;h3 id=&quot;taxonomy-construction&quot;&gt;Taxonomy Construction&lt;/h3&gt;
&lt;p&gt;Include classes that are visually identifiable&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Avoid&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Abstract /controversial concepts&lt;/li&gt;
  &lt;li&gt;Proper nouns, adjectives, and basic shapes&lt;/li&gt;
  &lt;li&gt;Occupations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the result of classify image
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/image_classification.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Terms&lt;/em&gt;
Confidence &amp;gt; Threshold =&amp;gt; Predicted image&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Precision and Recall&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;hasMinimumPrecision&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;Recall&lt;/code&gt; params to help filtering the high precision images.
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/image_classify_recall.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- PR Curve &amp;lt;img src=&quot;/images/2019-06-07-Vision-Framework/image_pr_curve.png&quot; width=&quot;100%&quot;&amp;gt;

- Use Recall &amp;amp; Precision to controll get the high precision &amp;lt;img src=&quot;/images/2019-06-07-Vision-Framework/filter_pr_curve.png&quot; width=&quot;100%&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Returned observation contains labels and an associated confidence.
Choice of threshold is application specific.
Can be determined by desired precision and recall.&lt;/p&gt;

&lt;h1 id=&quot;image-similarity&quot;&gt;Image Similarity&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-07-Vision-Framework/image_similarity.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Descriptor should describes image content, not just appearance.
Classification network creates representations of images.
FeaturePrint - vector image descriptor similar to a word vector.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-07-Vision-Framework/demo_image_similarity.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;face-technology&quot;&gt;Face Technology&lt;/h1&gt;
&lt;h2 id=&quot;face-landmarks&quot;&gt;Face Landmarks&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-06-07-Vision-Framework/face_landmarks.png&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/face_landmarks_demo.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VNDetectedObjectObservation&lt;/code&gt; contain bounding Box -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;VNFaceObservation&lt;/code&gt;(landmarks)
&lt;code class=&quot;highlighter-rouge&quot;&gt;VNFaceLandmarks&lt;/code&gt; confidence -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;VNFaceLandmarks2D&lt;/code&gt; (eyes…)&lt;/p&gt;

&lt;p&gt;Revision Example – default versus explicit
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/face_landmarks_revision.png&quot; width=&quot;100%&quot; /&gt;
76points -&amp;gt; 2019 SDK&lt;/p&gt;

&lt;h2 id=&quot;face-capture-quality&quot;&gt;Face Capture Quality&lt;/h2&gt;
&lt;p&gt;Face Capture Quality is a holistic measure that considers:
lighting, blur, occlusion, expression, pose, …
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/face_capture_quality.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Face capture quality should not be compared against a threshold.
Face capture quality is a &lt;code class=&quot;highlighter-rouge&quot;&gt;comparative&lt;/code&gt; measure of the &lt;code class=&quot;highlighter-rouge&quot;&gt;same&lt;/code&gt; subject.&lt;/p&gt;

&lt;h1 id=&quot;new-detector&quot;&gt;New Detector&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Human Detector&lt;/li&gt;
  &lt;li&gt;Cat and Dog Detector
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/new_detectors.png&quot; width=&quot;100%&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tracking-enhancements&quot;&gt;Tracking Enhancements&lt;/h1&gt;
&lt;p&gt;Less expansion into the background
Better handling of occlusions
Machine Learning based
Runs on CPU, GPU, and A12 Bionic with low power consumption
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/tracking_vision.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VNSequenceRequestHandler()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inputObservation&lt;/code&gt;
could add revision -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;request.revision = VNTrackObjectRequestRevision2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vision-and-coreml-integration-enhancements&quot;&gt;Vision and CoreML Integration Enhancements&lt;/h1&gt;
&lt;p&gt;Vision now works with CoreML models that have &lt;code class=&quot;highlighter-rouge&quot;&gt;single input&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;image type&lt;/code&gt;
Vision converts &lt;code class=&quot;highlighter-rouge&quot;&gt;Inputs&lt;/code&gt; image to CoreML required input size and color scheme
Vision wraps &lt;code class=&quot;highlighter-rouge&quot;&gt;Outputs&lt;/code&gt; into appropriate Observation types
&lt;img src=&quot;/images/2019-06-07-Vision-Framework/vision_coreML.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vision can now work with CoreML models that have &lt;code class=&quot;highlighter-rouge&quot;&gt;one or more&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Inputs&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Including &lt;code class=&quot;highlighter-rouge&quot;&gt;multi-image&lt;/code&gt; inputs
Vision will use &lt;code class=&quot;highlighter-rouge&quot;&gt;name-mapping&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Output&lt;/code&gt; names to Observations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-06-07-Vision-Framework/vision_coreML_api.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="Image Processing" /><category term="Vision" /><summary type="html">Since WWDC 2018, Apple introduces the Vision Framework. And I’d like to take some nots on it.</summary></entry><entry><title type="html">Debug UIViewAlertForUnsatisfiableConstraints</title><link href="http://localhost:4000/ios/layout/constraint/2019/05/28/Debug-UIViewAlertForUnsatisfiableConstraints.html" rel="alternate" type="text/html" title="Debug UIViewAlertForUnsatisfiableConstraints" /><published>2019-05-28T01:04:00+09:00</published><updated>2019-05-28T01:04:00+09:00</updated><id>http://localhost:4000/ios/layout/constraint/2019/05/28/Debug-UIViewAlertForUnsatisfiableConstraints</id><content type="html" xml:base="http://localhost:4000/ios/layout/constraint/2019/05/28/Debug-UIViewAlertForUnsatisfiableConstraints.html">&lt;p&gt;When we update our app’s UI, sometimes we might got this layout warning like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-05-27-Debug-UIViewAlertForUnsatisfiableConstraints/layout_warning.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uhhhhh, What should we do now?&lt;/p&gt;

&lt;p&gt;So, follow the instruction&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints
to catch this in the debugger`&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK. Got it. Let’s set a &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbolic&lt;/code&gt; breakpoint by setting its &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewAlertForUnsatisfiableConstraints&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-05-27-Debug-UIViewAlertForUnsatisfiableConstraints/add_symbolic.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DONE. :tada:&lt;/p&gt;

&lt;p&gt;Now, go into this warning view again. The breakpoint will automatically
interruput you to this :arrow_down:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019-05-27-Debug-UIViewAlertForUnsatisfiableConstraints/symbolic_breakpoint.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What to do now with pointers and assembly codes?&lt;/p&gt;

&lt;p&gt;After searching, I found some solutions to debug this breakpoint.
If you see the :arrow_up: images, you can find strings like
&lt;strong&gt;%rbp, %rsp, %r15, %r14&lt;/strong&gt; etc…
These properties hold the address of view-s &amp;amp; constraint-s.
We could print them in XCode console to see more details.&lt;/p&gt;

&lt;p&gt;EX: try to print &lt;code class=&quot;highlighter-rouge&quot;&gt;po $rbx&lt;/code&gt;, which contains all the views &amp;amp; constraints
which are involved in this issue. It also contains the memory address
of the view.&lt;/p&gt;

&lt;p&gt;If you want to change the appearance of some views.
You could try below commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;ex [(UIView *)0x7fb2dceb4e80 setBackgroundColor: [UIColor greenColor]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue program execution&lt;/code&gt;, you will see the related view’s
background color has been changed.&lt;/p&gt;

&lt;p&gt;Sometimes, the view with changed colors might be burried under other
views, so it wont be immediately visible on the screen.
In such case, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug View Hierachy&lt;/code&gt; to dig deeper ~~~~&lt;/p&gt;

&lt;p&gt;Hope it would be helpful to someone. :relaxed:&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="Layout Constraint" /><summary type="html">When we update our app’s UI, sometimes we might got this layout warning like this:</summary></entry><entry><title type="html">Crash Reports</title><link href="http://localhost:4000/ios/xcode/crash%20reports/debug/2019/05/14/Crash-Reports.html" rel="alternate" type="text/html" title="Crash Reports" /><published>2019-05-14T01:04:00+09:00</published><updated>2019-05-14T01:04:00+09:00</updated><id>http://localhost:4000/ios/xcode/crash%20reports/debug/2019/05/14/Crash-Reports</id><content type="html" xml:base="http://localhost:4000/ios/xcode/crash%20reports/debug/2019/05/14/Crash-Reports.html">&lt;p&gt;As an app developer, not only deploy the product, we also need to be able to analyze the crash log. And find a way to fix the crashes.&lt;/p&gt;

&lt;p&gt;When an application crashed, a &lt;code class=&quot;highlighter-rouge&quot;&gt;crash report&lt;/code&gt; is created and stored on the device. This article is simple introduce the crash reports contents and the analytic method.&lt;/p&gt;

&lt;h1 id=&quot;symbolicating-crash-reports&quot;&gt;Symbolicating Crash Reports&lt;/h1&gt;
&lt;p&gt;Crash reports with backtraces need to be &lt;code class=&quot;highlighter-rouge&quot;&gt;symbolicated&lt;/code&gt; before being anlyzed. Symbolication replacec memory addresses with human-readable function names and line numbers.&lt;/p&gt;

&lt;p&gt;Here is the overview of the crash reporting and symbolicating process.
&lt;img src=&quot;/images/2019-05-13-Crash-Reports/overview.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;symbolicating-process&quot;&gt;Symbolicating Process&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Compiler translates the source code, it also generates debug symbols (which map each machine instruction in the comipled binary back to the line of source code from which it originated) – Depending on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug Information Format&lt;/code&gt; build settings. These debug symbols are stored inside the binary or in a companion Debug Symbol(&lt;code class=&quot;highlighter-rouge&quot;&gt;dSYM&lt;/code&gt;) file. By default, debug builds of an application store the debug symbols inside the compiled binary while release builds of an application store the debug symbols in a companion dSYM file to reduce the binary size. The Debug Symbol file and application binary are tied together on a per-build-basis by the build UUID. A new UUID is generated for each build of your application and uniquely identifies that build. Even if a functionally-identical executable is rebuilt from the same source code, with the same compiler settings, it will have a different build UUID. Debug Symbol files from subsequent builds, even from the same source files, will not interoperate with binaries from other builds.&lt;/li&gt;
  &lt;li&gt;During archive, Xcode will gather the application binary along with the .dSYM file and store them at a location inside your home folder. You can find all of your archived applications in the Xcode Organizer under the “Archived” section.
    &lt;ul&gt;
      &lt;li&gt;NOTE: To symbolicate crash reports from testers, app review, and customers, you must retain th archive for each build of the application that you distribute.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Distributing: if you are distributing your app via the App Store, or conducting a beta test using Test Flight, you will be given the option of including the &lt;code class=&quot;highlighter-rouge&quot;&gt;dSYM&lt;/code&gt; file when uploading your archive to iTunes Connect. In the submission dialog, check “Include app symbols for your application…”. Uploading your &lt;code class=&quot;highlighter-rouge&quot;&gt;dSYM&lt;/code&gt; file is necessary to receive crash reports collected from TestFlight users and customers who have opted to share diagnostic data.&lt;/li&gt;
  &lt;li&gt;When your application crashes, an unsymbolicated crash report is created and stored on the device.&lt;/li&gt;
  &lt;li&gt;Users can retrieve crash reports directly from their device by following the steps in Debugging Deployed iOS Apps. If you have distributed your application via AdHoc or Enterprise distribution, this is the only way to acquire crash reports from your users.&lt;/li&gt;
  &lt;li&gt;Crash reports retrieved from a device are unsymbolicated and will need to be symbolicated using Xcode. Xcode uses the dSYM file associated with your application binary to replace each address in the backtrace with its originating location in your source code. The result is a symbolicated crash report.&lt;/li&gt;
  &lt;li&gt;If the user has opted to share diagnostic data with Apple, or if the user has installed a beta version of your application through TestFlight, the crash report is uploaded to the App Store.&lt;/li&gt;
  &lt;li&gt;The App Store symbolicates the crash report and groups it with similar crash reports. This aggregate of similar crash reports is called a Crash Point.&lt;/li&gt;
  &lt;li&gt;The symbolicated crash reports are made available to you in Xcode’s Crashes organizer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;getting-dsym-files&quot;&gt;Getting dSYM files&lt;/h2&gt;

&lt;h3 id=&quot;downloading-the-dsym-files-from-xcode&quot;&gt;Downloading the dSYM files from Xcode&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In the Archives organizer, select the archive that you originally submitted to the App Store.&lt;/li&gt;
  &lt;li&gt;Click the Download dSYMs button.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;downloading-the-dsym-files-from-the-itunes-connect-website&quot;&gt;Downloading the dSYM files from the iTunes Connect website&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Open the App Details page.&lt;/li&gt;
  &lt;li&gt;Click Activity.&lt;/li&gt;
  &lt;li&gt;From the list of All Builds, select a version.&lt;/li&gt;
  &lt;li&gt;Click the Download dSYM link.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;translating-symbol-names-back-to-original-names&quot;&gt;Translating symbol names back to original names&lt;/h3&gt;
&lt;p&gt;When you upload your app with bitcode to the App Store, you may choose not to
send your application’s symbols by unchecking the “Upload your app’s symbols to
receive symbolicated reports from Apple” box in the submission dialog.
If you choose not to send your app’s symbol information to Apple, Xcode will
replace the symbols in your app’s .dSYM files with obfuscated symbols such as
“&lt;em&gt;_hidden#109&lt;/em&gt;” before sending your app to iTunes Connect. Xcode creates a
mapping between the original symbols and the “hidden” symbols and stores this
mapping in a .bcsymbolmap file inside the application archive. Each .dSYM file
will have a corresponding .bcsymbolmap file.&lt;/p&gt;

&lt;p&gt;Before symbolicating crash reports, you will need to de-obfuscate the symbols in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dSYM&lt;/code&gt; files downloaded from iTunes Connect.
If you use the Download dSYMs button in Xcode, this de-obfuscation will be
performed automatically for you.
However, if you use the iTunes Connect website to download the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dSYM&lt;/code&gt; files, open Terminal and use the following command to de-obfuscate your symbols
(replacing the example paths with your own archive and the dSYMs folder downloaded from iTunes Connect):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun dsymutil -symbol-map ~/Library/Developer/Xcode/Archives/2017-11-23/MyGreatApp\ 11-23-17\,\ 12.00\ PM.xcarchive/BCSymbolMaps ~/Downloads/dSYMs/3B15C133-88AA-35B0-B8BA-84AF76826CE0.dSYM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;check-if-a-crash-report-is-symbolicated&quot;&gt;Check if a Crash Report is Symbolicated&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019-05-13-Crash-Reports/symbolicate_report.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;symbolicating-ios-crash-reports-with-xcode&quot;&gt;Symbolicating iOS Crash Reports with Xcode&lt;/h2&gt;
&lt;p&gt;Xcode will automatically attempt to symbolicate all crash reports.
All you need to do for symbolication is to add the crash report to the Xcode Organizer.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Note: Xcode will not accept crash reports without a &lt;code class=&quot;highlighter-rouge&quot;&gt;.crash&lt;/code&gt; extension. If you have received a crash report without an extension, or with a &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; extension, rename it to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.crash&lt;/code&gt; extension before following the steps listed below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow the steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Connect an iOS device to your Mac&lt;/li&gt;
  &lt;li&gt;Choose “Devices” from the “Window” menu&lt;/li&gt;
  &lt;li&gt;Under the “DEVICES” section in the left column, choose a device&lt;/li&gt;
  &lt;li&gt;Click the “View Device Logs” button under the “Device Information” section on the right hand panel&lt;/li&gt;
  &lt;li&gt;Drag your crash report onto the left column of the presented panel&lt;/li&gt;
  &lt;li&gt;Xcode will automatically symbolicate the crash report and display the results&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;symbolicating-crash-reports-with-atos&quot;&gt;Symbolicating Crash Reports With atos&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atos&lt;/code&gt; command can be used to symbolicate individual addresses in the backtrace
of an unsymbolicatd, or partially symbolicatd, crash report.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find a line in the backtrace which you want to symbolicate. Note the name of the binary image in the second column, and the address in the third column.&lt;/li&gt;
  &lt;li&gt;Look for a binary image with that name in the list of binary images at the bottom of the crash report. Note the architecture and load address of the binary image.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;atos -arch &amp;lt;Binary Architecture&amp;gt; -o &amp;lt;Path to dSYM file&amp;gt;/Contents/Resources/DWARF/&amp;lt;binary image name&amp;gt; -l &amp;lt;load address&amp;gt; &amp;lt;address to symbolicate&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;symbolication-troubleshooting&quot;&gt;Symbolication Troubleshooting&lt;/h2&gt;
&lt;p&gt;If Xcode is failing to fully symbolicate a crash report, it’s likely because your
Mac is missing the dSYM file for the application binary, the dSYM files for one
or more frameworks the application links against, or the device symbols for the
OS the application was running on when it crashed.&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Find a line in the backtrace which Xcode failed to symbolicate. Note the name of the binary image in the second column.&lt;/li&gt;
  &lt;li&gt;Look for a binary image with that name in the list of binary images at the bottom of the crash report. This list contains the UUIDs for each of the binary images that were loaded into the process at the time of the crash.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep --after-context=1000 &quot;Binary Images:&quot; &amp;lt;Path to Crash Report&amp;gt; | grep &amp;lt;Binary Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert the UUID of the binary image to a 32 character string seperated in groups of 8-4-4-4-12 (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX). Note that all letters must be uppercased.&lt;/li&gt;
  &lt;li&gt;Search for the UUID using the mdfind command line tool using the query “com_apple_xcode_dsym_uuids == &lt;UUID&gt;&quot; (include the quotation marks).
&lt;/UUID&gt;    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mdfind &quot;com_apple_xcode_dsym_uuids == &amp;lt;UUID&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If Spotlight finds a dSYM file for the UUID, mdfind will print the path to the dSYM file and possibly its containing archive. If a dSYM file for the UUID was not found, mdfind will exit without printing anything.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you think that you have the correct dSYM for the binary image, you can use the dwarfdump command to print the matching UUIDs. You can also use the dwarfdump command to print the UUIDs of a binary.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xcrun dwarfdump --uuid &amp;lt;Path to dSYM file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;analyzing-crash-reports&quot;&gt;Analyzing Crash Reports&lt;/h1&gt;

&lt;h1 id=&quot;getting-crash-logs&quot;&gt;Getting Crash Logs&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/qa/qa1747/_index.html&quot;&gt;Debugging Deployed iOS Apps&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-crash-logs-directly-from-a-device-without-xcode&quot;&gt;Getting Crash Logs Directly From a Device Without Xcode&lt;/h3&gt;
&lt;p&gt;(It is not possible to get device console logs directly from a device)
1) Open Settings app
2) Go to Privacy, then Diagnostics &amp;amp; Usage
3) Select Diagnostics &amp;amp; Usage Data
4) Locate the log for the crashed app. The logs will be named in the format: &lt;AppName&gt;_&lt;DateTime&gt;_&lt;DeviceName&gt;
5) Select the desired log. Then, using the text selection UI select the entire text of the log. Once the text is selected, tap Copy
6) Paste the copied text to Mail and send to an email address as desired&lt;/DeviceName&gt;&lt;/DateTime&gt;&lt;/AppName&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-crash-logs-and-console-output-from-a-device-using-xcode&quot;&gt;Getting Crash Logs and Console Output From a Device Using Xcode&lt;/h3&gt;
&lt;p&gt;(Even though you won’t be able to run the app in Xcode’s debugger, Xcode can still give you all the information you need to debug the problem.)
1) Plug in the device and open Xcode
2) Choose Window -&amp;gt; Devices from the menu bar
3) Under the DEVICES section in the left column, choose the device
4) To see the device console, click the up-triangle at the bottom left of the right hand panel
5) Click the down arrow on the bottom right to save the console as a file
6) To see crash logs, select the View Device Logs button under the Device Information section on the right hand panel
7) Find your app in the Process column and select the Crash log to see the contents.
8) To save a crash log, right click the entry on the left column and choose “Export Log”
9) Xcode 6 will also list low memory logs here. These will be shown with a Process name “Unknown” and Type “Unknown”. You should examine the contents of these logs to determine whether any of these are caused by your app. For more information about low memory logs, see Understanding and Analyzing iOS Application Crash Reports.&lt;/p&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/technotes/tn2151/_index.html&quot;&gt;Technical Note TN2151: Understanding and Analyzing Application Crash Reports&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="iOS" /><category term="XCode" /><category term="Crash Reports" /><category term="Debug" /><summary type="html">As an app developer, not only deploy the product, we also need to be able to analyze the crash log. And find a way to fix the crashes.</summary></entry></feed>